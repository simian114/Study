### 2020-11-30

-----
##### 1. 학습 날짜
- 2020-11-30

-----
##### 2. 학습 시간
- 13:00 ~ 20:00

-----
###### 3. 학습 범위 및 주제
- 웹서버 설계 및 구현

-----
##### 4. 동료 학습 방법
- slack

-----
##### 5. 학습 목표
- 서버의 동작 방식을 익히고 그에 맞게 설계 및 구현을 한다.

-----
##### 6. 과제 제출
- https://github.com/get-Pork-Belly/Webserv

-----
##### 7. 상세 학습 내용

-  웹서버
    - 오늘은 흠... 대체 뭘 했을까... 주말동안 작업하던 예외처리 PR을 마무리 지었고... 오전에는 JPG 파일을 CGI가 처리하지 못하는 이유에 대해 분석했고 점심 이후에는 분석 결과를 토대로 문제를 해결했다. 문제의 해결 방법은 간단했다. CGI PIPE가 write 셋이 되어 있는데 파이프가 망가져서 (CGI 프로세스에 무슨 일이 생겼기 떄문)read 를 하지 못하게 되면 자동으로 시간을 count down 하기 시작한다. 그리고 일정 시간 이후에 timeout이 된다. timeout에 중요한 이슈가 하나 더 있는데, 우리 서버는 cgi의 결과로 반드시 chunked로 클라이언트한테 응답을 보내준다. 따라서 데이터를 보내는 중에 에러가 나면 이전처럼 단순하게 status_code만 세팅해줘서는 안된다. 왜냐하면 status code가 세팅이 되면 에러 메시지를 보내는데 우리는 chunked로 이미 데이터를 전송했기 때문에 에러 메시지가 전송이 되면 이상하게 꼬여버린다. 따라서 time out이 나게 되면 우리 서버는 클라이언트한테 0을 보내고 끝을 알려준다. 여기서 조금 생각했어야 했던 부분은 이후에 error 메시지를 전송해야하냐 말아야 하냐 였는데, 나는 보낼 필요가 없다고 생각했었고 같이 진행하던 팀원도 필요 없다고 생각했기에 더 이상의 작업을 하지는 않았다.
    - PR을 했던 내용을 되짚어 보자면 나는 서버의 모든 에러들이 SendErrorCodeToClient 하나의 익셉션 클래스를 상속받게 만들었었다. 그리고 조금 많은 수의 에러 클래스를 만들었다. 에러 클래스를 여러 개 추가한 이유는 다음과 같다. 기존에 catch에 잡히는 에러가 너무 많았었고, 또한 하나의 catch 문에 들어왔다고 해도 fd 에 따라 다른 작업을 해야하기 때문에 catch 문 안에서 분기가 과할 정도로 나눠졌어야 했다. 따라서 이러한 비가독성의 문제를 해결하고자 각 에러마다 에러 클래스를 만들었고 특정 에러가 throw가 된다면 던져진 예외 클래스에서 자신에게 특화된 작업을 처리하고 catch문에서는 단순하게 에러가 무엇인지에 대해 출력하게만 만들었다. 개인적으로 아주 잘 만들었다고 생각했었지만, 리뷰를 해주신 팀원분은 그렇게 생각하지 않는것 같았다. 솔직히 나는 어떻게 만드는게 정석인지는 아직 잘 모르겠다. 팀원분은 catch 문에 와서 각 에러가 어떻게 처리가 되어야 할지를 직접 보는게 더 가독성이 좋고 클린 코드라고 말씀하셨다. 이 부분에 대해서는 학습을 해야할 필요가 있어 보인다.
    - php-cgi 대체 이 녀석은 뭐란 말인가... 과제를 진행할 때 본 기억이 없는데 과제 막바지에 이르러서야 이 녀석의 존재를 알게 되었다. php-cgi는 long-live 하는 프로세스로 cgi 프로그램을 직접? 실행시켜주는 녀석 같았다.  솔직히 아직 잘 모르겠다. 그리고 어떻게 구현해야하는지도 모르겠다. 진짜 죽겠다..


-----

##### 8. 오늘 학습 내용에 대한 개인적인 총평
- 막바지에 와서 너무 과부화되는 것 같다. 스트레스 만땅이다.. 

-----

##### 9. 다음 학습 계획

- 웹서버 설계 및 구현
