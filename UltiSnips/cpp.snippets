priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    UTIL 													  #
###########################################################################

snippet gettimediff "소요 시간 구하는 함수"
// #include <sys/time.h>
std::string getTimeDiff(timeval from)
{
	timeval t;
	gettimeofday(&t, NULL);
	std::string diff = std::to_string((t.tv_sec - from.tv_sec) * 1000000 + (t.tv_usec - from.tv_usec));
	diff.push_back(' ');
	return diff;
}
endsnippet

snippet from_to
timeval from;
gettimeofday(&from, NULL);

std::string from_to = getTimeDiff(from);
endsnippet


###########################################################################
#			    ANSI COLOR 												  #
###########################################################################
snippet cout
std::cout << << std::endl;
endsnippet

snippet cgray
std::cout << "\033[1;30m" << ${1} << "\033[0m" << std::endl;
endsnippet

snippet gray
"\033[1;30m${1}\033[0m"
endsnippet

snippet cred
std::cout << "\033[1;31m" << ${1} << "\033[0m" << std::endl; ${2}
endsnippet

snippet red
"\033[1;31m${1}\033[0m"
endsnippet

snippet cgreen
std::cout << "\033[1;32m" << ${1} << "\033[0m" << std::endl;
endsnippet

snippet green
"\033[1;32m${1}\033[0m"
endsnippet

snippet cyellow
std::cout << "\033[1;33m" << ${1} << "\033[0m" << std::endl;
endsnippet

snippet yellow
"\033[1;33m${1}\033[0m"
endsnippet

snippet cblue
std::cout << "\033[1;34m" << ${1} << "\033[0m" << std::endl;
endsnippet

snippet blue
"\033[1;34m${1}\033[0m"
endsnippet

snippet cpurple
std::cout << "\033[1;35m" << ${1} << "\033[0m" << std::endl;
endsnippet

snippet purple
"\033[1;35m${1}\033[0m"
endsnippet

snippet ccyan
std::cout << "\033[1;36m" << ${1} << "\033[0m" << std::endl;
endsnippet

snippet cyan
"\033[1;36m${1}\033[0m"
endsnippet

snippet cwhite
std::cout << "\033[1;37m" << ${1} << "\033[0m" << ::endl;
endsnippet

snippet white
"\033[1;37m${1}\033[0m"
endsnippet
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cpp
#include "${1:`!p snip.rv = snip.basename`}.hpp"

/*============================================================================*/
/****************************  Static variables  ******************************/
/*============================================================================*/

/*============================================================================*/
/******************************  Constructor  *********************************/
/*============================================================================*/

$1::$1()
{
}

$1::$1(const $1& other)
{
}

/*============================================================================*/
/******************************  Destructor  **********************************/
/*============================================================================*/

$1::~$1()
{
}

/*============================================================================*/
/*******************************  Overload  ***********************************/
/*============================================================================*/

$1& $1::operator=(const $1& rhs)
{
	return (*this);
}

/*============================================================================*/
/********************************  Getter  ************************************/
/*============================================================================*/

/*============================================================================*/
/********************************  Setter  ************************************/
/*============================================================================*/

/*============================================================================*/
/******************************  Exception  ***********************************/
/*============================================================================*/

/*============================================================================*/
/*********************************  Util  *************************************/
/*============================================================================*/
endsnippet

snippet class "class .. (class)"
#ifndef ${2:`!p snip.rv = snip.basename.upper()`}
# define $2

class ${1:`!p snip.rv = snip.basename or "name"`}
{
private:
	/* data */
public:
	/* Constructor */
	snippet();
	snippet(const snippet& other);

	/* Destructor */
	virtual ~snippet();

	/* Overload */
	snippet& operator=(const snippet& rhs);

	/* Getter */
	/* Setter */
	/* Exception */
	/* Util */
};

#endif
endsnippet

snippet hpp "class .. (class)"
#ifndef ${2:`!p snip.rv = snip.basename.upper()`}
# define $2

class ${1:`!p snip.rv = snip.basename or "name"`}
{
private:
	/* data */
public:
	/* Constructor */
	snippet();
	snippet(const snippet& other);

	/* Destructor */
	virtual ~snippet();

	/* Overload */
	snippet& operator=(const snippet& rhs);

	/* Getter */
	/* Setter */
	/* Exception */
	/* Util */
};

#endif
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

snippet boost_test "Boost test module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:TestCaseName})
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite "Boost test suite module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(${2:SuiteName})

BOOST_AUTO_TEST_CASE(${3:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
snippet boost_test_fixture "Boost test module with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite_fixture "Boost test suite with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)

BOOST_AUTO_TEST_CASE(${4:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
# vim:ft=snippets:
